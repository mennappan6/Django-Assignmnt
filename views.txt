# core/views.py
from django.shortcuts import render, redirect, get_object_or_404
from .models import Question, Answer, AnswerLike
from .forms import QuestionForm, AnswerForm, SignUpForm
from django.contrib.auth import login, authenticate, logout
from django.contrib.auth.decorators import login_required
from django.contrib import messages

def home(request):
    questions = Question.objects.all().order_by('-created')
    return render(request, 'core/home.html', {'questions': questions})

def signup_view(request):
    if request.method == 'POST':
        form = SignUpForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect('home')
    else:
        form = SignUpForm()
    return render(request, 'core/signup.html', {'form': form})

def login_view(request):
    if request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(request, username=username, password=password)
        if user:
            login(request, user)
            return redirect('home')
        else:
            messages.error(request, "Invalid credentials")
    return render(request, 'core/login.html')

def logout_view(request):
    logout(request)
    return redirect('home')

@login_required
def ask_question(request):
    if request.method == 'POST':
        form = QuestionForm(request.POST)
        if form.is_valid():
            question = form.save(commit=False)
            question.user = request.user
            question.save()
            return redirect('home')
    else:
        form = QuestionForm()
    return render(request, 'core/ask.html', {'form': form})

def view_question(request, id):
    question = get_object_or_404(Question, pk=id)
    answers = Answer.objects.filter(question=question)
    form = AnswerForm()
    return render(request, 'core/question.html', {
        'question': question,
        'answers': answers,
        'form': form
    })

@login_required
def answer_question(request, id):
    question = get_object_or_404(Question, pk=id)
    if request.method == 'POST':
        form = AnswerForm(request.POST)
        if form.is_valid():
            answer = form.save(commit=False)
            answer.user = request.user
            answer.question = question
            answer.save()
    return redirect('view_question', id=question.id)

@login_required
def like_answer(request, answer_id):
    answer = get_object_or_404(Answer, pk=answer_id)
    like, created = AnswerLike.objects.get_or_create(answer=answer, user=request.user)
    return redirect('view_question', id=answer.question.id)
